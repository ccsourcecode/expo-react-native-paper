######## IOS CONFIGURATIONS
require 'securerandom'

# If you want to make the build automatically available to external groups,
# add the name of the group to the array below, after "App Store Connect Users"
groups = ENV["External_Tests_group_name"]
workspace = ENV["WORKSPACE"]
project = ENV["PROJECT"]
slack_weebhook_url = ENV["SLACK_WEBHOOK_URL"]

# If you build for multiple environments, you might wanna set this specifically on build_app
configuration = ENV["CONFIGURATION"]
scheme = ENV["SCHEME"]
export_method = ENV["EXPORT_METHOD"]
key_id = ENV["APP_STORE_CONNECT_API_KEY_TEAM_KEY_ID"] # The key id of the p8 file
issuer_id = ENV["APP_STORE_CONNECT_API_KEY_TEAM_ISSUER_ID"] # issuer id on appstore connect
key_filepath = ENV["APP_STORE_CONNECT_API_KEY_KEY_FILEPATH"] # The path to p8 file generated on appstore connect

######## END IOS CONFIGURATIONS



default_platform(:ios)

platform :ios do
  desc "Push a new build to TestFlight"

  lane :build_and_release do
    setup_ci
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    
    # Set key filepath based on CI or local environment
    key_filepath_to_use = ENV["CI"] ? "secretKey.p8" : key_filepath
    
    # Retrieves the API key from App Store Connect
    api_key = app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_filepath: key_filepath_to_use
    )
    
    # Debug - Print API key details
    puts "API Key Details:"
    puts "Key ID: #{key_id}"
    puts "Issuer ID: #{issuer_id}"
    puts "Key Filepath: #{key_filepath_to_use}"
    puts "API Key Object: #{api_key.inspect}"

    # Retrieves the latest build number from TestFlight
    latest_build_number = latest_testflight_build_number(
        api_key: api_key,
        app_identifier: app_identifier
    )
    # Sets the build number explicitly instead of incrementing
    build_number = latest_build_number + 1
    puts "Setting build number to: #{build_number}"
    
    # Skip automatic versioning which requires Apple Generic Versioning
    # increment_build_number(
    #     build_number: (latest_build_number + 1),
    # )

    # Clears the derived data
    clear_derived_data
    # Matches the certificates and profiles
    # The error is occurring because match is trying to create a development or ad-hoc provisioning profile which requires device registration, but no devices are registered.
    # By specifying type: "appstore", we're telling fastlane to use an App Store distribution profile which doesn't require registered devices.
    if ENV["CI"]
      # Create keychain for CI environment, creates a temporary keychain with a random password
      keychain_name = "fastlane_tmp_keychain"
      keychain_password = SecureRandom.uuid
      
      # Create temporary keychain for the CI environment
      sh("security create-keychain -p #{keychain_password} #{keychain_name}")
      sh("security default-keychain -s #{keychain_name}")
      sh("security unlock-keychain -p #{keychain_password} #{keychain_name}")
      sh("security set-keychain-settings -t 3600 -l #{keychain_name}")
      
      # Use the created keychain
      match(
        api_key: api_key,
        type: "appstore",
        readonly: true,
        app_identifier: app_identifier,
        verbose: true,
        keychain_name: keychain_name,
        keychain_password: keychain_password
      )
    else
      # For local environment, use the login keychain
      match(
        api_key: api_key,
        type: "appstore",
        readonly: true,
        app_identifier: app_identifier,
        verbose: true
      )
    end

    # Builds the app
    begin
      gym(
        project: project,
        scheme: scheme,
        configuration: configuration,
        export_options: {
          method: export_method,
          compile_bitcode: false
        },
        xcargs: "CURRENT_PROJECT_VERSION=#{build_number}",
        clean: true,
        output_directory: "build",
        include_symbols: true,
        include_bitcode: false,
        export_xcargs: "-allowProvisioningUpdates",
        skip_codesigning: false,
        buildlog_path: "fastlane/logs",
        xcodebuild_formatter: "",
        disable_xcpretty: true
      )
    rescue => ex
      UI.error("Build failed with error: #{ex}")
      UI.error("Error details: #{ex.backtrace.join("\n")}")
      
      # Continue anyway to see if we can get more information
      sh("find ~/Library/Developer/Xcode/DerivedData -name '*.log' -type f -exec grep -l 'error' {} \\; | xargs cat")
      raise ex
    end

    # Uploads the build to TestFlight
    pilot(
      changelog: "Build #{build_number}",
      api_key: api_key,
      app_identifier: app_identifier,
      distribute_external: true,
      groups: groups,
    )

    # Sends a message to Slack channel #general to notify that the build is available for open testing
    slack(
      slack_url: slack_weebhook_url,
      message: "Build #{build_number} is available on TestFlight",
      channel: "#general",
      default_payloads: [],
      success: true,
      payload: {
        'Build Date' => Time.now,
        'Build Number' => build_number
      }
    )

    clean_build_artifacts
  end
end