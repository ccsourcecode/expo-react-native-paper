default_platform(:ios)

before_all do
  # Set up CI environment if running on CI
  setup_ci if FastlaneCore::Helper.ci?
  
  # Explicitly select Xcode version if on CircleCI
  if FastlaneCore::Helper.ci?
    xcode_select "/Applications/Xcode-15.4.app" if File.directory?("/Applications/Xcode-15.4.app")
    UI.important("Using Xcode version: #{`xcodebuild -version`.strip}")
  end
  
  # Performance optimization - disable Flipper for production builds
  ENV["DISABLE_FLIPPER"] = "1" if ENV["FASTLANE_LANE"] == "beta" || ENV["FASTLANE_LANE"] == "release"
  
  # Opt out of interactive mode for CI
  ENV["FASTLANE_OPT_OUT_USAGE"] = "1"
  ENV["FASTLANE_SKIP_UI"] = "1"
end

platform :ios do
  desc "Set up code signing using App Store Connect API"
  private_lane :setup_code_signing do
    # Debug info
    UI.important("Setting up code signing...")
    UI.important("Running on CI: #{FastlaneCore::Helper.ci?}")
    UI.important("Current directory: #{Dir.pwd}")
    
    # Check for code signing environment variables
    has_api_key = !ENV["ASC_KEY_ID"].nil? && !ENV["ASC_ISSUER_ID"].nil?
    has_api_content = !ENV["ASC_KEY_CONTENT"].nil? || !ENV["ASC_KEY_CONTENT_BASE64"].nil? || !ENV["ASC_KEY_FILEPATH"].nil?
    has_apple_id = !ENV["FASTLANE_USER"].nil? && !ENV["FASTLANE_PASSWORD"].nil?
    
    UI.important("Has App Store Connect API key credentials: #{has_api_key && has_api_content}")
    UI.important("Has Apple ID credentials: #{has_apple_id}")
    UI.important("Team ID: #{ENV["APPLE_TEAM_ID"] || 'not set'}")
    
    begin
      # Try App Store Connect API key auth
      if has_api_key && has_api_content
        UI.message("Using App Store Connect API key authentication")
        
        if ENV["ASC_KEY_CONTENT_BASE64"]
          app_store_connect_api_key(
            key_id: ENV["ASC_KEY_ID"],
            issuer_id: ENV["ASC_ISSUER_ID"],
            key_content: ENV["ASC_KEY_CONTENT_BASE64"],
            is_key_content_base64: true,
            in_house: false
          )
        elsif ENV["ASC_KEY_FILEPATH"]
          app_store_connect_api_key(
            key_id: ENV["ASC_KEY_ID"],
            issuer_id: ENV["ASC_ISSUER_ID"],
            key_filepath: ENV["ASC_KEY_FILEPATH"],
            in_house: false
          )
        else
          app_store_connect_api_key(
            key_id: ENV["ASC_KEY_ID"],
            issuer_id: ENV["ASC_ISSUER_ID"],
            key_content: ENV["ASC_KEY_CONTENT"],
            in_house: false
          )
        end
      # Fall back to Apple ID authentication if API key doesn't work
      elsif has_apple_id
        UI.important("Using Apple ID authentication")
        # No explicit action needed, fastlane will use these environment variables
      else
        UI.important("No valid authentication method found. Trying code signing without authentication.")
      end
    rescue => e
      UI.error("Authentication error: #{e.message}")
      UI.error("Will try to continue without authentication")
    end
    
    # Configure Xcode project for code signing
    begin
      if ENV["APPLE_TEAM_ID"].nil?
        UI.error("No team ID provided! This will likely cause signing to fail.")
      else
        # Set up automatic signing as a safer default
        UI.message("Setting up automatic code signing with team ID: #{ENV["APPLE_TEAM_ID"]}")
        update_code_signing_settings(
          use_automatic_signing: true,
          path: "ios/exporeactnativepaper.xcodeproj",
          team_id: ENV["APPLE_TEAM_ID"],
          targets: ["exporeactnativepaper"]
        )
      end
    rescue => e
      UI.error("Error setting code signing: #{e.message}")
    end
  end

  desc "Build iOS app for testing (for CI)"
  lane :build do
    setup_code_signing
    
    # Print debugging information
    UI.important("Xcode path: #{`xcode-select -p`.strip}")
    UI.important("Current directory: #{Dir.pwd}")
    UI.important("Workspace exists: #{File.exist?('ios/exporeactnativepaper.xcworkspace')}")
    
    # Build the app with simplified configuration for CI
    build_ios_app(
      workspace: "ios/exporeactnativepaper.xcworkspace",
      scheme: "exporeactnativepaper",
      export_method: "development", # Use development method for CI
      output_directory: ENV["FL_OUTPUT_DIR"] || "./build",
      output_name: "exporeactnativepaper-dev.ipa",
      xcargs: "COMPILER_INDEX_STORE_ENABLE=NO IPHONEOS_DEPLOYMENT_TARGET=12.0",
      include_symbols: false,
      include_bitcode: false,
      silent: false, # Show more build output
      skip_package_ipa: false, # This may help avoid archive errors
      skip_profile_detection: true, # Avoid extra profile detection steps
      export_options: {
        signingStyle: "automatic",
        teamID: ENV["APPLE_TEAM_ID"]
      }
    )
  end

  desc "Build and upload to TestFlight"
  lane :beta do
    setup_code_signing
    
    # Print debugging information
    UI.important("Xcode path: #{`xcode-select -p`.strip}")
    UI.important("Current directory: #{Dir.pwd}")
    UI.important("Workspace exists: #{File.exist?('ios/exporeactnativepaper.xcworkspace')}")
    
    # Increment build number
    increment_build_number(
      xcodeproj: "ios/exporeactnativepaper.xcodeproj"
    )
    
    # Build the app with simplified configuration
    build_ios_app(
      workspace: "ios/exporeactnativepaper.xcworkspace",
      scheme: "exporeactnativepaper",
      export_method: "app-store",
      output_directory: ENV["FL_OUTPUT_DIR"] || "./build",
      output_name: "exporeactnativepaper.ipa",
      xcargs: "COMPILER_INDEX_STORE_ENABLE=NO IPHONEOS_DEPLOYMENT_TARGET=12.0", 
      clean: true,
      include_bitcode: false,
      silent: false, # Show more build output
      export_options: {
        signingStyle: "automatic",
        teamID: ENV["APPLE_TEAM_ID"],
        compileBitcode: false,
        provisioningProfiles: ENV["PROVISIONING_PROFILE_NAME"] ? 
          { (ENV["APP_IDENTIFIER"] || "com.yourcompany.exporeactnativepaper") => ENV["PROVISIONING_PROFILE_NAME"] } : nil
      }
    )
    
    # Upload to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )
  end
  
  desc "Upload to TestFlight (for CircleCI)"
  lane :uploadtestflight do
    beta # Reuse the beta lane
  end

  desc "Take screenshots for iOS (requires UI tests)"
  lane :screenshots do
    capture_ios_screenshots(
      workspace: "ios/ExpoReactNativePaper.xcworkspace",
      scheme: "ExpoReactNativePaperUITests",
      devices: ["iPhone 8", "iPhone 11 Pro", "iPhone 13 Pro Max"],
      languages: ["en-US"],
      clear_previous_screenshots: true,
      output_directory: "fastlane/screenshots",
      skip_open_summary: true,
      override_status_bar: true,
      headless: true
    )
  end
end

platform :android do
  desc "Build Android app"
  lane :build do
    # Performance optimization - disable unused ABIs
    gradle_properties = {
      "android.abi.filter" => "armeabi-v7a,arm64-v8a",
      "android.enableR8.fullMode" => "true",
      "hermesEnabled" => "true"
    }
    
    # Build the app
    gradle(
      task: "assemble",
      build_type: "Release",
      project_dir: "android/",
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_PATH"] || ENV["ANDROID_KEYSTORE_FILE"],
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"],
      }.merge(gradle_properties)
    )
  end

  desc "Build and upload to Play Store internal track"
  lane :beta do
    # Increment version code
    increment_version_code(
      gradle_file_path: "android/app/build.gradle"
    )
    
    # Performance optimization - disable unused ABIs
    gradle_properties = {
      "android.abi.filter" => "armeabi-v7a,arm64-v8a",
      "android.enableR8.fullMode" => "true",
      "hermesEnabled" => "true"
    }
    
    # Build Android App Bundle with performance optimizations
    gradle(
      task: "bundle",
      build_type: "Release",
      project_dir: "android/",
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_PATH"] || ENV["ANDROID_KEYSTORE_FILE"],
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"],
      }.merge(gradle_properties)
    )
    
    # Upload to Play Store
    upload_to_play_store(
      track: 'internal',
      release_status: 'draft',
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      json_key: ENV["GOOGLE_PLAY_JSON_KEY"]
    )
  end
  
  desc "Deploy to production (for CircleCI)"
  lane :deploy_to_production do
    # Increment version code
    increment_version_code(
      gradle_file_path: "android/app/build.gradle"
    )
    
    # Performance optimization - disable unused ABIs
    gradle_properties = {
      "android.abi.filter" => "armeabi-v7a,arm64-v8a",
      "android.enableR8.fullMode" => "true",
      "hermesEnabled" => "true"
    }
    
    # Print debug info
    UI.message("ANDROID_KEYSTORE_PATH: #{ENV['ANDROID_KEYSTORE_PATH']}")
    UI.message("ANDROID_KEYSTORE_PASSWORD is set: #{!ENV['ANDROID_KEYSTORE_PASSWORD'].nil?}")
    UI.message("ANDROID_KEY_ALIAS is set: #{!ENV['ANDROID_KEY_ALIAS'].nil?}")
    UI.message("ANDROID_KEY_PASSWORD is set: #{!ENV['ANDROID_KEY_PASSWORD'].nil?}")
    
    # Build Android App Bundle with performance optimizations
    gradle(
      task: "bundle",
      build_type: "Release",
      project_dir: "android/",
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_PATH"] || ENV["ANDROID_KEYSTORE_FILE"],
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"]
      }.merge(gradle_properties)
    )
    
    # Upload to Play Store
    upload_to_play_store(
      track: 'production', # Deploy to production track
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      json_key: ENV["GOOGLE_PLAY_JSON_KEY"]
    )
  end

  desc "Take screenshots for Android (requires Espresso tests)"
  lane :screenshots do
    capture_android_screenshots(
      app_package_name: "com.yourname.exporeactnativepaper",
      app_apk_path: "android/app/build/outputs/apk/debug/app-debug.apk",
      tests_apk_path: "android/app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk",
      locales: ["en-US"],
      clear_previous_screenshots: true,
      test_instrumentation_runner: "androidx.test.runner.AndroidJUnitRunner",
      output_directory: "fastlane/metadata/android",
      skip_open_summary: true
    )
  end
end

desc "Generate screenshots for both iOS and Android (if UI tests exist)"
lane :screenshots do
  ios_screenshots
  android_screenshots
end