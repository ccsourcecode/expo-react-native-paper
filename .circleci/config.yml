version: 2.1

orbs:
  node: circleci/node@5.1.0
  ruby: circleci/ruby@2.1.1

jobs:
  build:
    macos:
      xcode: "14.3.1" # Choose an appropriate Xcode version
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: beta
      # These environment variables should be set in CircleCI project settings:
      # ASC_KEY_ID: App Store Connect API Key ID
      # ASC_ISSUER_ID: App Store Connect API Issuer ID
      # ASC_KEY_CONTENT: App Store Connect API Key Content (base64 encoded)
      # APPLE_TEAM_ID: Your Apple Developer Team ID
      # For Android builds:
      # ANDROID_KEYSTORE_FILE: Path to your keystore file
      # ANDROID_KEYSTORE_PASSWORD: Your keystore password
      # ANDROID_KEY_ALIAS: Your key alias
      # ANDROID_KEY_PASSWORD: Your key password
      # GOOGLE_PLAY_JSON_KEY: Path to your Google Play JSON key file
      # Required Ruby/OpenSSL environment variables
      GEM_HOME: /Users/distiller/.gem
      GEM_PATH: /Users/distiller/.gem
    steps:
      - checkout
      
      # Setup Node.js
      - node/install:
          node-version: '18.18.0'
      
      # Install dependencies using npm
      - restore_cache:
          keys:
            - npm-deps-v1-{{ checksum "package.json" }}
      - run:
          name: Install Dependencies
          command: |
            echo "Using npm for package installation"
            npm install
      - save_cache:
          key: npm-deps-v1-{{ checksum "package.json" }}
          paths:
            - node_modules
      
      # Install required dependencies for RVM and Ruby
      - run:
          name: Install GPG, OpenSSL and other prerequisites
          command: |
            brew update
            brew install gnupg
            brew install openssl@3
            brew install curl
            # Verify GPG is installed
            gpg --version
            # Set OpenSSL paths
            echo 'export PATH="/usr/local/opt/openssl@3/bin:$PATH"' >> $BASH_ENV
            echo 'export LDFLAGS="-L/usr/local/opt/openssl@3/lib"' >> $BASH_ENV
            echo 'export CPPFLAGS="-I/usr/local/opt/openssl@3/include"' >> $BASH_ENV
            echo 'export PKG_CONFIG_PATH="/usr/local/opt/openssl@3/lib/pkgconfig"' >> $BASH_ENV
            # Set OpenSSL flags for Ruby
            echo 'export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@3)"' >> $BASH_ENV
            source $BASH_ENV
      
      # Create .ruby-version file for consistent version
      - run:
          name: Create Ruby version file
          command: echo "3.3.8" > .ruby-version
      
      # Setup Ruby using orb
      - ruby/install:
          version: '3.3.8'
      
      # Explicitly configure Ruby with OpenSSL
      - run:
          name: Configure Ruby with OpenSSL
          command: |
            # Set required environment variables
            echo 'export GEM_HOME="/Users/distiller/.gem"' >> $BASH_ENV
            echo 'export GEM_PATH="/Users/distiller/.gem"' >> $BASH_ENV
            echo 'export SSL_CERT_FILE="$(brew --prefix)/etc/openssl@3/cert.pem"' >> $BASH_ENV
            echo 'export OPENSSL_CFLAGS="-I$(brew --prefix openssl@3)/include"' >> $BASH_ENV
            echo 'export OPENSSL_LIBS="-L$(brew --prefix openssl@3)/lib -lssl -lcrypto"' >> $BASH_ENV
            source $BASH_ENV
            
            # Verify environment
            echo "Ruby location: $(which ruby)"
            echo "Ruby version: $(ruby -v)"
            echo "Gem location: $(which gem)"
            echo "Gem env:"
            gem env
      
      # Ruby dependencies
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run: 
          name: Install Ruby Dependencies
          command: |
            # Confirm OpenSSL is available to Ruby
            ruby -ropenssl -e "puts OpenSSL::OPENSSL_VERSION"
            
            # Install bundler with specific options
            gem install bundler --no-document --conservative
            
            # Configure bundler
            bundle config set --local path 'vendor/bundle'
            bundle config build.nokogiri --use-system-libraries
            
            # Install dependencies
            bundle install
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
            
      - run:
          name: Generate Native Code from Expo
          command: npx expo prebuild --clean
      - run:
          name: Setup CI Environment
          command: bundle exec fastlane setup_circle_ci
      - run:
          name: Take Screenshots
          command: bundle exec fastlane screenshots
      - run:
          name: Build and Deploy
          command: bundle exec fastlane $FASTLANE_LANE
      - store_artifacts:
          path: output
      - store_artifacts:
          path: fastlane/screenshots
          destination: screenshots