version: 2.1

orbs:
  node: circleci/node@5.1.0

jobs:
  react-native-test:
    docker:
      - image: cimg/node:20.10
    environment:
      CI: true
      # Performance optimizations for Jest
      JEST_WORKER_ID: 1
      NODE_OPTIONS: "--max-old-space-size=4096"

    steps:
      - checkout

      - restore_cache:
          keys:
            - npm-v1-{{ checksum "package-lock.json" }}-{{ arch }}
            - npm-v1-{{ arch }}

      - restore_cache:
          keys:
            - node-modules-v1-{{ checksum "package.json" }}-{{ arch }}
            - node-modules-v1-{{ arch }}

      - run: npm install
      - run: npm test -- --maxWorkers=2
      - run: npm run tsc

      - save_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}-{{ arch }}
          paths:
            - ~/.npm
          when: always

      - save_cache:
          key: node-modules-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
          when: always

  macos-build-and-deploy:
    macos:
      xcode: 15.4.0
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: beta
      # Performance optimizations
      DISABLE_FLIPPER: 1
      # These environment variables should be set in CircleCI project settings:
      # ASC_KEY_ID: App Store Connect API Key ID
      # ASC_ISSUER_ID: App Store Connect API Issuer ID
      # ASC_KEY_CONTENT: App Store Connect API Key Content (base64 encoded)
      # APPLE_TEAM_ID: Your Apple Developer Team ID
      # For Android builds:
      # ANDROID_KEYSTORE_FILE: Path to your keystore file
      # ANDROID_KEYSTORE_PASSWORD: Your keystore password
      # ANDROID_KEY_ALIAS: Your key alias
      # ANDROID_KEY_PASSWORD: Your key password
      # GOOGLE_PLAY_JSON_KEY: Path to your Google Play JSON key file

    steps:
      - checkout
      
      - restore_cache:
          keys:
            - npm-v1-{{ checksum "package-lock.json" }}-{{ arch }}
            - npm-v1-{{ arch }}

      - restore_cache:
          keys:
            - node-modules-v1-{{ checksum "package.json" }}-{{ arch }}
            - node-modules-v1-{{ arch }}

      - run: npm install

      - save_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}-{{ arch }}
          paths:
            - ~/.npm
          when: always

      - save_cache:
          key: node-modules-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
          when: always

      - run:
          name: Install Ruby Dependencies
          command: |
            # Check Ruby version
            ruby --version
            
            # Install bundler first
            gem install bundler --user-install
            
            # Create a Gemfile if it doesn't exist
            if [ ! -f Gemfile ]; then
              echo "source 'https://rubygems.org'" > Gemfile
              echo "gem 'fastlane'" >> Gemfile
              echo "gem 'cocoapods'" >> Gemfile
            fi
            
            # Install gems via bundler
            bundle config set --local path 'vendor/bundle'
            bundle install
            
            # Verify installation
            bundle exec fastlane --version
            bundle exec pod --version
          working_directory: .

      - run:
          name: Setup iOS Signing Configuration
          command: |
            # Remove rbenv references
            chmod +x fastlane/setup-ios-signing.sh
            ./fastlane/setup-ios-signing.sh
            
      - run:
          name: Generate Native Code from Expo
          command: npx expo prebuild --clean

      - restore_cache:
          keys:
            - pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
            - pods-v1-{{ arch }}

      - run:
          name: Install CocoaPods with Performance Optimizations
          command: |
            # Install pods using bundler
            cd ios && bundle exec pod install --verbose
          working_directory: .

      - save_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
          paths:
            - ios/Pods
          when: always

      - run:
          name: Deploy to TestFlight
          command: |
            # Use bundle exec for fastlane
            cd fastlane
            bundle exec fastlane ios beta
          environment:
            ASC_KEY_ID: ${ASC_KEY_ID}
            ASC_ISSUER_ID: ${ASC_ISSUER_ID}
            ASC_KEY_CONTENT: ${ASC_KEY_CONTENT}
            APPLE_TEAM_ID: ${APPLE_TEAM_ID}
            
      - store_artifacts:
          path: output
          destination: ios-build
          
      # Optional: Store the .ipa file separately for easy access
      - store_artifacts:
          path: ~/Library/Developer/Xcode/Archives
          destination: ios-archives

  android-build-and-deploy:
    docker:
      - image: cimg/android:2023.09.1-node
    environment:
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Dorg.gradle.jvmargs='-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8'"
      # Performance optimizations
      DISABLE_FLIPPER: 1
      
    steps:
      - checkout
      
      - restore_cache:
          keys:
            - npm-v1-{{ checksum "package-lock.json" }}-{{ arch }}
            - npm-v1-{{ arch }}

      - restore_cache:
          keys:
            - node-modules-v1-{{ checksum "package.json" }}-{{ arch }}
            - node-modules-v1-{{ arch }}

      - run: npm install

      - save_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}-{{ arch }}
          paths:
            - ~/.npm
          when: always

      - save_cache:
          key: node-modules-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
          when: always
          
      - run:
          name: Install Ruby Dependencies
          command: |
            # Check Ruby version
            ruby --version
            
            # Install bundler first
            gem install bundler --user-install
            
            # Create a Gemfile if it doesn't exist
            if [ ! -f Gemfile ]; then
              echo "source 'https://rubygems.org'" > Gemfile
              echo "gem 'fastlane'" >> Gemfile
              echo "gem 'cocoapods'" >> Gemfile
            fi
            
            # Install gems via bundler
            bundle config set --local path 'vendor/bundle'
            bundle install
            
            # Verify installation
            bundle exec fastlane --version
            bundle exec pod --version
          working_directory: .

      - run:
          name: Install Ninja and CMake Dependencies
          command: |
            # Install Ninja build system
            sudo apt-get update
            sudo apt-get install -y ninja-build cmake
            
            # Verify installation
            ninja --version
            cmake --version

      - run:
          name: Generate Native Code from Expo
          command: npx expo prebuild --clean
          
      - run:
          name: Add Performance Optimizations to Gradle
          command: |
            # Remove deprecated option from gradle.properties
            sed -i '/android.disableAutomaticComponentCreation/d' android/gradle.properties
            
            # Add performance optimizations to gradle.properties using individual echo statements
            echo "" >> android/gradle.properties
            echo "# Performance optimizations" >> android/gradle.properties
            echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" >> android/gradle.properties
            echo "org.gradle.daemon=true" >> android/gradle.properties
            echo "org.gradle.configureondemand=true" >> android/gradle.properties
            echo "org.gradle.parallel=true" >> android/gradle.properties
            echo "org.gradle.caching=true" >> android/gradle.properties
            echo "android.enableR8.fullMode=true" >> android/gradle.properties
            echo "android.enableJetifier=true" >> android/gradle.properties
            echo "android.useAndroidX=true" >> android/gradle.properties
            echo "" >> android/gradle.properties
            echo "# Disable unused ABIs to speed up build" >> android/gradle.properties
            echo "android.abi.filter=armeabi-v7a,arm64-v8a" >> android/gradle.properties
            echo "" >> android/gradle.properties
            echo "# Hermes optimizations" >> android/gradle.properties
            echo "hermesEnabled=true" >> android/gradle.properties
            echo "newArchEnabled=false" >> android/gradle.properties
            
      - run:
          name: Setup Android Signing Keys
          command: |
            # Remove rbenv references
            chmod +x fastlane/setup-android-keys.sh
            ./fastlane/setup-android-keys.sh
            
      - run:
          name: Deploy to Play Store Beta
          command: |
            # Use bundle exec for fastlane
            cd fastlane
            bundle exec fastlane android beta
          environment:
            ANDROID_KEYSTORE_FILE: ${ANDROID_KEYSTORE_FILE}
            ANDROID_KEYSTORE_PASSWORD: ${ANDROID_KEYSTORE_PASSWORD}
            ANDROID_KEY_ALIAS: ${ANDROID_KEY_ALIAS}
            ANDROID_KEY_PASSWORD: ${ANDROID_KEY_PASSWORD}
            GOOGLE_PLAY_JSON_KEY: ${GOOGLE_PLAY_JSON_KEY}
            
      - store_artifacts:
          path: android/app/build/outputs
          destination: android-build

workflows:
  version: 2
  test-build-deploy:
    jobs:
      - react-native-test
      - macos-build-and-deploy:
          requires:
            - react-native-test
          filters:
            branches:
              only: main
      - android-build-and-deploy:
          requires:
            - react-native-test
          filters:
            branches:
              only: main