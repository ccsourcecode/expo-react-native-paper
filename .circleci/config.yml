version: 2.1

orbs:
  node: circleci/node@5.1.0

jobs:
  react-native-test:
    docker:
      - image: cimg/node:20.10
    environment:
      CI: true
      # Performance optimizations for Jest
      JEST_WORKER_ID: 1
      NODE_OPTIONS: "--max-old-space-size=4096"

    steps:
      - checkout

      - restore_cache:
          keys:
            - npm-v1-{{ checksum "package-lock.json" }}-{{ arch }}
            - npm-v1-{{ arch }}

      - restore_cache:
          keys:
            - node-modules-v1-{{ checksum "package.json" }}-{{ arch }}
            - node-modules-v1-{{ arch }}

      - run: npm install
      - run: npm test -- --maxWorkers=2
      - run: npm run tsc

      - save_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}-{{ arch }}
          paths:
            - ~/.npm
          when: always

      - save_cache:
          key: node-modules-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
          when: always

  macos-build-and-deploy:
    macos:
      xcode: 15.4.0
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: beta
      # Performance optimizations
      DISABLE_FLIPPER: 1
      # These environment variables should be set in CircleCI project settings:
      # ASC_KEY_ID: App Store Connect API Key ID
      # ASC_ISSUER_ID: App Store Connect API Issuer ID
      # ASC_KEY_CONTENT: App Store Connect API Key Content (base64 encoded)
      # APPLE_TEAM_ID: Your Apple Developer Team ID
      # For Android builds:
      # ANDROID_KEYSTORE_FILE: Path to your keystore file
      # ANDROID_KEYSTORE_PASSWORD: Your keystore password
      # ANDROID_KEY_ALIAS: Your key alias
      # ANDROID_KEY_PASSWORD: Your key password
      # GOOGLE_PLAY_JSON_KEY: Path to your Google Play JSON key file

    steps:
      - checkout
      
      - restore_cache:
          keys:
            - npm-v1-{{ checksum "package-lock.json" }}-{{ arch }}
            - npm-v1-{{ arch }}

      - restore_cache:
          keys:
            - node-modules-v1-{{ checksum "package.json" }}-{{ arch }}
            - node-modules-v1-{{ arch }}

      - run: npm install

      - save_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}-{{ arch }}
          paths:
            - ~/.npm
          when: always

      - save_cache:
          key: node-modules-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
          when: always

      - run:
          name: Install Ruby Dependencies
          command: |
            gem install fastlane
            gem install cocoapods

      - run:
          name: Setup iOS Signing Configuration
          command: |
            chmod +x fastlane/setup-ios-signing.sh
            ./fastlane/setup-ios-signing.sh
            
      - run:
          name: Generate Native Code from Expo
          command: npx expo prebuild --clean

      - restore_cache:
          keys:
            - pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
            - pods-v1-{{ arch }}

      - run:
          name: Install CocoaPods with Performance Optimizations
          command: |
            # Add performance optimizations to Podfile
            echo "Adding performance optimizations to Podfile..."
            cat >> ios/Podfile \<< 'EOL'

            # Performance optimizations
            post_install do |installer|
              installer.pods_project.targets.each do |target|
                target.build_configurations.each do |config|
                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FB_SONARKIT_ENABLED=0'
                  config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
                  
                  # Speed up build time
                  config.build_settings['SWIFT_COMPILATION_MODE'] = 'wholemodule'
                  
                  # Recommended flags for performance
                  config.build_settings['COMPILER_INDEX_STORE_ENABLE'] = 'NO'
                  config.build_settings['ENABLE_BITCODE'] = 'NO'
                end
              end
            end
            EOL
            
            cd ios && pod install --verbose
          working_directory: .

      - save_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
          paths:
            - ios/Pods
          when: always

      - run:
          name: Deploy to TestFlight
          command: |
            cd fastlane
            fastlane ios beta
          environment:
            ASC_KEY_ID: ${ASC_KEY_ID}
            ASC_ISSUER_ID: ${ASC_ISSUER_ID}
            ASC_KEY_CONTENT: ${ASC_KEY_CONTENT}
            APPLE_TEAM_ID: ${APPLE_TEAM_ID}

  android-build-and-deploy:
    docker:
      - image: cimg/android:2023.09.1-node
    environment:
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Dorg.gradle.jvmargs='-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8'"
      # Performance optimizations
      DISABLE_FLIPPER: 1
      
    steps:
      - checkout
      
      - restore_cache:
          keys:
            - npm-v1-{{ checksum "package-lock.json" }}-{{ arch }}
            - npm-v1-{{ arch }}

      - restore_cache:
          keys:
            - node-modules-v1-{{ checksum "package.json" }}-{{ arch }}
            - node-modules-v1-{{ arch }}

      - run: npm install

      - save_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}-{{ arch }}
          paths:
            - ~/.npm
          when: always

      - save_cache:
          key: node-modules-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
          when: always
          
      - run:
          name: Install Ruby Dependencies
          command: |
            gem install fastlane

      - run:
          name: Generate Native Code from Expo
          command: npx expo prebuild --clean
          
      - run:
          name: Add Performance Optimizations to Gradle
          command: |
            echo "Adding performance optimizations to gradle.properties..."
            cat >> android/gradle.properties \<< 'EOL'
            
            # Performance optimizations
            org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
            org.gradle.daemon=true
            org.gradle.configureondemand=true
            org.gradle.parallel=true
            org.gradle.caching=true
            android.enableR8.fullMode=true
            android.enableJetifier=true
            android.useAndroidX=true
            android.disableAutomaticComponentCreation=true
            
            # Disable unused ABIs to speed up build
            android.abi.filter=armeabi-v7a,arm64-v8a
            
            # Hermes optimizations
            hermesEnabled=true
            newArchEnabled=false
            EOL
            
      - run:
          name: Setup Android Signing Keys
          command: |
            chmod +x fastlane/setup-android-keys.sh
            ./fastlane/setup-android-keys.sh
            
      - run:
          name: Deploy to Play Store Beta
          command: |
            cd fastlane
            fastlane android beta
          environment:
            ANDROID_KEYSTORE_FILE: ${ANDROID_KEYSTORE_FILE}
            ANDROID_KEYSTORE_PASSWORD: ${ANDROID_KEYSTORE_PASSWORD}
            ANDROID_KEY_ALIAS: ${ANDROID_KEY_ALIAS}
            ANDROID_KEY_PASSWORD: ${ANDROID_KEY_PASSWORD}
            GOOGLE_PLAY_JSON_KEY: ${GOOGLE_PLAY_JSON_KEY}

workflows:
  version: 2
  test-build-deploy:
    jobs:
      - react-native-test
      - macos-build-and-deploy:
          requires:
            - react-native-test
          filters:
            branches:
              only: main
      - android-build-and-deploy:
          requires:
            - react-native-test
          filters:
            branches:
              only: main