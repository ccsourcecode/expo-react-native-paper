name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  react-native-test:
    runs-on: ubuntu-latest
    env:
      CI: true
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: '20.10'
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm install
      
      - name: Run Tests
        run: npm test
      
      - name: TypeScript Check
        run: npm run tsc
  
  ios-build:
    needs: react-native-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: macos-latest
    env:
      # These environment variables should be set in GitHub Secrets:
      # ASC_KEY_ID: App Store Connect API Key ID
      # ASC_ISSUER_ID: App Store Connect API Issuer ID
      # ASC_KEY_CONTENT: App Store Connect API Key Content (base64 encoded)
      # APPLE_TEAM_ID: Your Apple Developer Team ID
      # APP_STORE_CONNECT_API_KEY: App Store Connect API Key (base64 encoded)
      # IOS_PRIVATE_KEY: iOS distribution certificate private key (base64 encoded)
      FL_OUTPUT_DIR: output
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: '20.10'
          cache: 'npm'
      
      - name: Install JS Dependencies
        run: npm install
      
      - name: Create Lock Files
        run: |
          # Create empty lock files to prevent cache errors
          touch Gemfile.lock
          mkdir -p ios
          touch ios/Podfile.lock
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0.0'
          bundler-cache: true
          
      - name: Fix OpenSSL issues
        run: |
          chmod +x fastlane/fix-openssl.sh
          ./fastlane/fix-openssl.sh
          
      - name: Install compatible OpenSSL
        run: |
          # Install OpenSSL 3
          brew install openssl@3
          echo 'export PATH="$(brew --prefix openssl@3)/bin:$PATH"' >> $GITHUB_ENV
          echo 'export LDFLAGS="-L$(brew --prefix openssl@3)/lib"' >> $GITHUB_ENV
          echo 'export CPPFLAGS="-I$(brew --prefix openssl@3)/include"' >> $GITHUB_ENV
          echo 'export PKG_CONFIG_PATH="$(brew --prefix openssl@3)/lib/pkgconfig"' >> $GITHUB_ENV
          echo 'export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@3)"' >> $GITHUB_ENV
      
      - name: Ruby and Bundler Info
        run: |
          ruby -v
          gem install bundler -v 2.3.20 --user-install
          export GEM_HOME="$HOME/.gem"
          export PATH="$GEM_HOME/ruby/$(ruby -e 'puts RUBY_VERSION')/bin:$HOME/.local/share/gem/ruby/$(ruby -e 'puts RUBY_VERSION')/bin:$PATH"
          bundler -v
      
      - name: Install Ruby Dependencies
        run: |
          export GEM_HOME="$HOME/.gem"
          export PATH="$GEM_HOME/ruby/$(ruby -e 'puts RUBY_VERSION')/bin:$HOME/.local/share/gem/ruby/$(ruby -e 'puts RUBY_VERSION')/bin:$PATH"
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs=4 --retry=3
        
      - name: Generate Native Code from Expo
        run: npx expo prebuild --clean
        
      - name: Install CocoaPods
        run: cd ios && pod install
        
      - name: Deploy to TestFlight
        run: sh fastlane/deploy-ios.sh
        env:
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_KEY_CONTENT: ${{ secrets.ASC_KEY_CONTENT }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          IOS_PRIVATE_KEY: ${{ secrets.IOS_PRIVATE_KEY }}
        
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: output/*.ipa

  android-build:
    needs: react-native-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=false"
      
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: '20.10'
          cache: 'npm'
      
      - name: Install JS Dependencies
        run: npm install
      
      - name: Create Required Files
        run: |
          echo "Creating initial required files..."
          touch Gemfile.lock
          mkdir -p android/app
          echo "// Placeholder until expo prebuild creates the real files" > android/build.gradle
          echo "// Placeholder until expo prebuild creates the real files" > android/app/build.gradle
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0.0'
          bundler-cache: true
          
      - name: Fix OpenSSL issues
        run: |
          chmod +x fastlane/fix-openssl.sh
          ./fastlane/fix-openssl.sh
          
      - name: Install compatible OpenSSL
        run: |
          # Install OpenSSL 3
          brew install openssl@3
          echo 'export PATH="$(brew --prefix openssl@3)/bin:$PATH"' >> $GITHUB_ENV
          echo 'export LDFLAGS="-L$(brew --prefix openssl@3)/lib"' >> $GITHUB_ENV
          echo 'export CPPFLAGS="-I$(brew --prefix openssl@3)/include"' >> $GITHUB_ENV
          echo 'export PKG_CONFIG_PATH="$(brew --prefix openssl@3)/lib/pkgconfig"' >> $GITHUB_ENV
          echo 'export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@3)"' >> $GITHUB_ENV
      
      - name: Ruby and Bundler Info
        run: |
          ruby -v
          gem install bundler -v 2.3.20 --user-install
          export GEM_HOME="$HOME/.gem"
          export PATH="$GEM_HOME/ruby/$(ruby -e 'puts RUBY_VERSION')/bin:$HOME/.local/share/gem/ruby/$(ruby -e 'puts RUBY_VERSION')/bin:$PATH"
          bundler -v
      
      - name: Install Ruby Dependencies
        run: |
          export GEM_HOME="$HOME/.gem"
          export PATH="$GEM_HOME/ruby/$(ruby -e 'puts RUBY_VERSION')/bin:$HOME/.local/share/gem/ruby/$(ruby -e 'puts RUBY_VERSION')/bin:$PATH"
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs=4 --retry=3
        
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          
      - name: Install Ninja (required for react-native-reanimated)
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build
        
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
          
      - name: Generate Native Code from Expo
        run: npx expo prebuild --clean --no-install
        timeout-minutes: 20
        
      - name: Fix Gradle Properties
        run: |
          chmod +x fastlane/fix-gradle-properties.sh
          ./fastlane/fix-gradle-properties.sh
        
      - name: Ensure gradlew exists
        run: |
          if [ ! -f "./android/gradlew" ]; then
            echo "gradlew not found! Creating gradle wrapper..."
            cd android
            gradle wrapper
            cd ..
          fi
          chmod +x ./android/gradlew
        
      - name: Configure Gradle for CI
        run: |
          echo "org.gradle.jvmargs=-Xmx2048m -XX:MaxMetaspaceSize=512m" >> android/gradle.properties
          echo "org.gradle.caching=true" >> android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties
        
      - name: Setup Android Signing Keys
        run: |
          # Make the script executable
          chmod +x fastlane/setup-android-keys.sh
          
          # Run the setup script
          ./fastlane/setup-android-keys.sh
        
      - name: Deploy to Google Play
        run: sh fastlane/deploy-android.sh
        timeout-minutes: 30
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_PLAY_STORE_CREDENTIALS: ${{ secrets.ANDROID_PLAY_STORE_CREDENTIALS }}
          ANDROID_SIGNING_KEY: ${{ secrets.ANDROID_SIGNING_KEY }}
          ANDROID_KEYSTORE_FILE: ./android-key.keystore
        
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-build
          path: android/app/build/outputs