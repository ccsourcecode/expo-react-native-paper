name: android-deployment

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'internal'
        type: choice
        options:
          - internal
          - alpha
          - beta
          - production

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      BASE_URL : ${{ vars.BASE_URL }}
    continue-on-error: false

    steps:
      # checks out the code from the repository
      - uses: actions/checkout@master

      # sets up the Ruby environment
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.4

      # Cache node_modules
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # installs the dependencies
      - name: Install Dependencies
        run: |
          cd android
          bundle install

      # Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # sets up the dependencies
      - name: Setup dependencies
        run: |
          echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}' > android/google-service-account-key.json
          echo "${{ secrets.ANDROID_SIGNING_KEY }}" > my-upload-key.keystore.asc
          gpg -d --passphrase "${{ secrets.ANDROID_SIGNING_KEY_PASSPHRASE }}" --batch my-upload-key.keystore.asc > android/app/my-upload-key.keystore

      # builds and deploys the app
      # installing Node.js dependencies, setting an environment variable to use the legacy OpenSSL provider
      # execute the fastlane command to deploy the app to the internal track on Google Play Store
      - name: Build and deploy
        run: |
          npm install
          export NODE_OPTIONS=--openssl-legacy-provider
          cd android
          
          # Use the selected environment from manual trigger or default to internal
          TRACK="${{ github.event.inputs.environment || 'internal' }}"
          
          if [ "$TRACK" = "internal" ]; then
            bundle exec fastlane android build_and_release_internal
          elif [ "$TRACK" = "alpha" ]; then
            bundle exec fastlane android build_and_release_alpha
          elif [ "$TRACK" = "beta" ]; then
            bundle exec fastlane android build_and_release_beta
          elif [ "$TRACK" = "production" ]; then
            bundle exec fastlane android build_and_release_production
          else
            bundle exec fastlane android build_and_release_internal
          fi